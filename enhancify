#!/usr/bin/bash

SRC="$HOME/Enhancify"

HELP="enhancify

Usage: enhancify [OPTION]

Options:
-f:  Force re-install Enhancify
-u:  Disable Update Check
-r:  Disable Root access
-v:  Print current version
-h:  Print help statement"

while getopts ":furvh" OPT 2> /dev/null; do
    case $OPT in
        f)
            rm "$SRC/.info" &> /dev/null
            ;;
        u)
            INTERNET_ACCESS=false
            ;;
        r)
            ROOT_ACCESS=false
            ;;
        v)
            if [ -e "$SRC" ]; then
                source "$SRC/.info"
                echo "$VERSION"
            else
                echo "Enhancify not installed !!"
            fi
            exit
            ;;
        h)
            echo -e "$HELP"
            exit
            ;;
        ?)
            echo -e "Invalid option specified: -${OPTARG}"
            echo -e "$HELP"
            exit 1
            ;;
    esac
done

terminate() {
    killall -9 curl &> /dev/null
    killall -9 wget &> /dev/null
    killall -9 aria2c &> /dev/null
    clear
    notify msg "Script terminated !!"
    exit 1
}
trap terminate SIGTERM SIGINT SIGABRT

download_with_aria2() {
    local url=$1
    local output_file=$2
    local gauge_text=$3
    local progress_file
    progress_file=$(mktemp)
    
    (
        local dir=$(dirname "$output_file")
        local file=$(basename "$output_file")
        cd "$dir" || exit 1
        
        aria2c --console-log-level=warn --summary-interval=1 --download-result=hide \
               --out="$file" \
               --split=4 --min-split-size=5M --max-connection-per-server=4 \
               --file-allocation=none \
               "$url" 2>&1 | \
            while read -r line; do
                if [[ "$line" =~ ([0-9]{1,3})% ]]; then
                    echo "${BASH_REMATCH[1]}" > "$progress_file"
                fi
            done
    ) &
    local download_pid=$!

    while kill -0 $download_pid 2>/dev/null; do
        local progress
        progress=$(cat "$progress_file" 2>/dev/null || echo 0)
        echo "$progress"
        sleep 0.1
    done | dialog --backtitle "Enhancify" --title "Downloading" \
                 --gauge "$gauge_text\nStatus: Parts:4 | mirrors connected 4" -1 -1 0
    
    wait $download_pid
    local exit_code=$?
    rm -f "$progress_file"
    return $exit_code
}

installDependencies() {
    local BINS BIN CTR RESPONSE

    echo "Checking dependencies..."
    [ -e "$HOME/storage" ] || termux-setup-storage

    BINS=$(ls "$PREFIX/bin")
    grep -q java <<< "$BINS" || PKGS+=("openjdk-21")
    grep -q wget <<< "$BINS" || PKGS+=("wget")
    grep -q tput <<< "$BINS" || PKGS+=("ncurses-utils")
    grep -q dialog <<< "$BINS" || PKGS+=("dialog")
    grep -q pup <<< "$BINS" || PKGS+=("pup")
    grep -q jq <<< "$BINS" || PKGS+=("jq")
    grep -q unzip <<< "$BINS" || PKGS+=("unzip")
    grep -q aria2c <<< "$BINS" || PKGS+=("aria2")

    if [ "${#PKGS[@]}" -ne 0 ]; then
        pkg update || return 1
        yes | pkg install "${PKGS[@]}" || return 1
    fi

    sed -i '/allow-external-apps/s/# //' "$HOME/.termux/termux.properties"
    [ -e "$SRC/bin" ] || mkdir -p "$SRC/bin"

    AAPT2="$SRC/bin/aapt2"
    APK_EDITOR="$SRC/bin/APKEditor.jar"

    CTR=0
    while [ ! -e "$AAPT2" ]; do
        [ $CTR -gt 2 ] && return 1
        notify msg "Downloading aapt2..."
        readarray -t RESPONSE < <(curl -s "https://api.github.com/repos/decipher3114/binaries/releases/latest" | jq -r --arg ARCH "$(getprop ro.product.cpu.abi)" '.assets[] | if (.name | test($ARCH)) then (.browser_download_url, .size) else empty end' 2> /dev/null)
        [ "${#RESPONSE[@]}" -eq 0 ] && return 1
        if download_with_aria2 "${RESPONSE[0]}" "$AAPT2" "Downloading aapt2..."; then
            chmod +x "$AAPT2"
            if [ "${RESPONSE[1]}" == "$(stat -c %s "$AAPT2" 2> /dev/null)" ]; then
                break
            else
                rm -f "$AAPT2"
                notify msg "Downloaded file size mismatch. Retrying..."
            fi
        else
            rm -f "$AAPT2"
            notify msg "Download failed. Retrying..."
        fi
        ((CTR++))
    done

    CTR=0
    while [ ! -e "$APK_EDITOR" ]; do
        [ $CTR -gt 2 ] && return 1
        notify msg "Downloading APKEditor..."
        readarray -t RESPONSE < <(curl -s "https://api.github.com/repos/REAndroid/APKEditor/releases/latest" | jq -r '.assets[0] | .browser_download_url, .size' 2> /dev/null)
        [ "${#RESPONSE[@]}" -eq 0 ] && return 1
        if download_with_aria2 "${RESPONSE[0]}" "$APK_EDITOR" "Downloading APKEditor..."; then
            if [ "${RESPONSE[1]}" == "$(stat -c %s "$APK_EDITOR" 2> /dev/null)" ]; then
                break
            else
                rm -f "$APK_EDITOR"
                notify msg "Downloaded file size mismatch. Retrying..."
            fi
        else
            rm -f "$APK_EDITOR"
            notify msg "Download failed. Retrying..."
        fi
        # Switch JDK versions on failure
        yes | pkg uninstall -y openjdk-21
        yes | pkg install openjdk-17
        ((CTR++))
    done

    return 0
}

fetchSrc() {
    [ -e "$SRC/.info" ] && source "$SRC/.info"

    [ "$INTERNET_ACCESS" == false ] && return

    ping -c 1 google.com &> /dev/null || return

    notify info "Checking Latest Release..."

    # Get release information including body (changelog)
    RELEASE_INFO=$(curl -s 'https://api.github.com/repos/Adity1243/Enhancify/releases/latest')
    TAG=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
    CHANGELOG=$(echo "$RELEASE_INFO" | jq -r '.body')
    ASSET_URL=$(echo "$RELEASE_INFO" | jq -r --arg TAG "$TAG" '.assets[] | select(.name == "\($TAG).zip") | .browser_download_url')
    ASSET_SIZE=$(echo "$RELEASE_INFO" | jq -r --arg TAG "$TAG" '.assets[] | select(.name == "\($TAG).zip") | .size')

    [ "$TAG" == "$VERSION" ] && return

    # Show installation notification
    dialog --title "Update Available" --infobox "Installing Enhancify $TAG..." 3 40
    sleep 2

    if download_with_aria2 "$ASSET_URL" "$TAG.zip" "Downloading Enhancify $TAG..."; then
        if [ "$ASSET_SIZE" == "$(stat -c %s "$TAG.zip" 2> /dev/null)" ]; then
            unzip -qo "$TAG.zip"
            rm -rf "$TAG.zip"
            for CONTENT in Enhancify-*/* Enhancify-*/.*; do
                rm -rf "${SRC:?}/$(basename "$CONTENT")"
                mv "$CONTENT" "$SRC/"
            done
            rm -rf Enhancify-* &> /dev/null
            cp -f "$SRC/enhancify" "$PREFIX/bin/enhancify"
            chmod +x "$PREFIX/bin/enhancify"
            
            # Show installation complete notification
            dialog --title "Installation Complete" --infobox "Enhancify $TAG is now installed." 3 50
            sleep 2
            
            # Show changelog
            CHANGELOG_FILE=$(mktemp)
            echo "$CHANGELOG" > "$CHANGELOG_FILE"
            dialog --backtitle "Enhancify $TAG Changelog" \
                   --title "What's New" \
                   --textbox "$CHANGELOG_FILE" \
                   20 70
            
            # Cleanup and run enhancify
            rm -f "$CHANGELOG_FILE"
            clear
            enhancify
            exit
        else
            echo "Downloaded file size mismatch. Please try again."
            rm -f "$TAG.zip"
            exit 1
        fi
    else
        echo -e "Unable to install Enhancify $TAG !!\nPlease try again with proper Internet"
        exit 1
    fi
}

clear

if ! installDependencies; then
    notify msg "Dependencies not installed !!\nRun again with stable internet connection."
    exit 1
fi

fetchSrc

if [ "$ROOT_ACCESS" != false ] && su -c 'exit' &> /dev/null; then
    ROOT_ACCESS=true
else
    ROOT_ACCESS=false
fi

cd "$SRC" &> /dev/null || terminate

bash main.sh "$ROOT_ACCESS"
EXIT_CODE=$?

exit "$EXIT_CODE"
